{{template "base" .}}

{{define "css"}}
<style>
    body {
        background-color: #f1f1f1;
        font-family: Arial, Helvetica, sans-serif;
    }

    h1 {
        text-align: center;
        padding: 10px;
        background: #532855;
        color: #fff
    }

    table {
        width: 100%;
    }

    tr {
        text-align: center;
    }

    td {
        border: 5px solid transparent;
        background-color: #f1f1f1;
        padding: 10px;
        text-align: center;
        display: center;
        color: black;
        width: 25%;
        height: 40px;
    }

    td[class="grey"] {
        background-color: lightgrey;
    }

    td[class="blue"] {
        background-color: DodgerBlue;
    }

    td[class="orange"] {
        background-color: orange;
    }

    td[class="green"] {
        background-color: lightgreen;
    }

    div#turneu h2 {
        text-align: center;
        padding: 10px;
        background: #532855;
        color: #fff
    }

    div#turneu h3 {
        text-align: center;
        background: #283a55;
        color: #fff
    }

    .etapa {
        background: #283a55;
    }

    .match {
        box-shadow: rgba(0, 0, 0, 0.57) 0px 25px 20px -21px;
        border-radius: 10px;
        margin: 12px auto;
        background: #c8dfed;
    }

    .finala {
        box-shadow: rgba(0, 0, 0, 0.57) 0px 25px 20px -21px;
        border-radius: 10px;
        margin: 12px auto;
        background: #8ccdf5;
    }

    .match-info strong {

        color: #fff;

        position: absolute;

        right: 50%;

        text-align: center;

        z-index: 1;

        border-radius: 5px;

        height: 36px;

        line-height: 36px;

        top: 30px;

        width: 60px;

        margin-right: -30px
    }

    .match-info {
        position: relative;
        height: 160px;
        line-height: 50px
    }

    .right-team-info {
        float: right;
        padding-left: 30px;
        width: 50%;
        position: relative;
        z-index: 2
    }

    .left-team-info {
        float: left;
        padding-right: 0px;
        width: 50%;
        position: absolute;
        z-index: 2
    }

    .team-name {
        text-align: center;
        color: transparent;
        font-size: 20px;
        font-family: "Arial", sans-serif;
        font-weight: bold;
    }

    li {
        list-style-type: none;
        height: 20px;
        line-height: 20px;
        font-size: 14px;
        font-family: "Arial", sans-serif;
        font-weight: bold;
        text-align: center;
        padding-right: 30px;
    }

    .Verde {
        background-color: rgb(10, 145, 28);
        -webkit-background-clip: text;
    }

    .Portocaliu {
        background-color: rgb(207, 105, 8);
        -webkit-background-clip: text;
    }

    .Albastru {
        background-color: DodgerBlue;
        -webkit-background-clip: text;
    }

    .Gri {
        background-color: rgb(102, 90, 90);
        -webkit-background-clip: text;
    }

    .scor {
        background-color: #283a55;
    }

    .autocomplete-items {
        position: absolute;
        border: 1px solid #d4d4d4;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: 100%;
        left: 0;
        right: 0;
    }

    .autocomplete-items div {
        padding: 10px;
        cursor: pointer;
        background-color: #fff;
        border-bottom: 1px solid #d4d4d4;
    }

    /*when hovering an item:*/
    .autocomplete-items div:hover {
        background-color: #e9e9e9;
    }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }

    .delete-button {
        font-size: 14px;
        color: red;
        margin-left: 5px;
        cursor: pointer;
    }


    input[type="text"] {
        padding: 5px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 300px;
    }


    .recomandari {
        list-style: none;
        padding: 0;
        margin: 0;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #fff;
        max-height: 200px;
        overflow-y: auto;
        width: 298px;
        position: absolute;
        z-index: 6;
        opacity: 0;
    }

    .recomandari li {
        padding: 5px 10px;
        cursor: pointer;
    }

    .recomandari li:hover {
        background-color: #f9f9f9;
    }

    .recomandari:not(:empty) {
        opacity: 1;
        background-color: rgba(255, 255, 255, 1);
    }

    .recomandari:empty {
        opacity: 0;
        background-color: transparent;
    }

    button {
        padding: 8px 16px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        background-color: #007BFF;
        color: #fff;
        cursor: pointer;
    }

    button:hover {
        background-color: #0056b3;
    }

    .finala ul li {
        color: black;
    }

    .selectare {
        padding: 8px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: white;
        width: 100px;
    }


    .selectare option {
        padding: 8px;
    }
</style>
{{end}}
{{define "content"}}


<body>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
        inteGrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
        crossorigin="anonymous"></script>


    <nav class="navbar bg-dark border-bottom border-bottom-dark" data-bs-theme="dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Home</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link" href="jucatori.htm">Jucatori</a>
                    </li>
                    <a class="nav-link" href="etape.htm">Etape</a>
                    </li>
            </div>
        </div>

    </nav>
    <div class="informatii-editie">
        <h1>Informatii editie</h1>
        <form class="form-grup" id="informatiiEtapa" action="/adauga-editie-json" method="post">
            <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
            <div class="row">
                <div class="col-auto">
                    <label for="data_editie">Data editie</label>
                    {{with .Form.Errors.Get "data_editie"}}
                    <label class="text-danger">{{.}}</label>
                    {{end}}
                    <input type="date" class="form-control" id="data_editie" name="data_editie">
                </div>
                <div class="col-auto">
                    <label for="numar_editie">Numarul editie</label>
                    {{with .Form.Errors.Get "numar_editie"}}
                    <label class="text-danger">{{.}}</label>
                    {{end}}
                    <input type="number" class="form-control" id="numar_editie" name="numar_editie">
                </div>
                <div class="col-auto">
                    <button type="submit" id="introduEditie" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </form>

    </div>

    <br><br>
    <br><br>

    <h1>Prezenta</h1>
    <div class="autocomplete">
        <input id="input_selectPlayer" type="text" name="player" placeholder="Numele Jucatorului">
        <button type="submit" id="button_selectPlayer" class="btn btn-primary">Introdu</button>
    </div>

    <br><br>
    <br><br>
    <br><br>

    <button id="getDataButton">Submit</button>

    <form action="/adauga-editie" method="post">
        <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">


        <table id="teams">
            <tr>
                <th>Gri</th>
                <th>Portocaliu</th>
                <th>Verde</th>
                <th>Albastru</th>
            </tr>
            <tr>
                <td class="grey"> </td>
                <td class="orange"></td>
                <td class="green"> </td>
                <td class="blue"> </td>
            </tr>
            <tr>
                <td class="grey"></td>
                <td class="orange"></td>
                <td class="green"> </td>
                <td class="blue"> </td>
            </tr>
            <tr>
                <td class="grey"> </td>
                <td class="orange"> </td>
                <td class="green"> </td>
                <td class="blue"> </td>
            </tr>
            <tr>
                <td class="grey"> </td>
                <td class="orange"> </td>
                <td class="green"> </td>
                <td class="blue"> </td>
            </tr>
            <tr>
                <td class="grey"> </td>
                <td class="orange"> </td>
                <td class="green"> </td>
                <td class="blue"> </td>
            </tr>
            <tr>
                <td class="grey"> </td>
                <td class="orange"> </td>
                <td class="green"> </td>
                <td class="blue"> </td>
            </tr>
        </table>

        <br><br>
        <br><br>
        <br><br>

        <div id="turneu">
            <h2>Tur</h2>

            <div class="editie etapa" id="etapa1">

                <h3>Etapa 1</h3>

                <input type="text" id="searchInput1" placeholder="IntroduceÈ›i o valoare">
                <button onclick="addValueToList(1)">Introdu</button>
                <ul id="recomandari1" class="recomandari"></ul>
                <br>
                <input type="text" id="searchInput8" placeholder="IntroduceÈ›i inlocuitor">
                <select id="selectare8" class="selectare">
                    <option value="Verde">Verde</option>
                    <option value="Albastru">Albastru</option>
                    <option value="Portocaliu">Portocaliu</option>
                    <option value="Gri">Gri</option>
                </select>
                <button onclick="addValueToList2(1)">Introdu</button>
                <ul id="recomandari8" class="recomandari"></ul>


                <div class="match" id="match1">
                    <div class="match-info">
                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Verde">
                                    Verde
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Verde">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Portocaliu">
                                    Portocaliu
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Portocaliu">

                            </ul>
                        </div>

                    </div>
                </div>

                <div class="match" id="match2">
                    <div class="match-info">
                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Albastru">
                                    Albastru
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Albastru">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Gri">
                                    Gri
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Gri">

                            </ul>
                        </div>

                    </div>
                </div>
            </div>
            <div class="etapa" id="etapa2">
                <h3>Etapa 2</h3>
                <input type="text" id="searchInput2" placeholder="IntroduceÈ›i o valoare">
                <button onclick="addValueToList(2)">Introdu</button>
                <ul id="recomandari2" class="recomandari"></ul>
                <br>
                <input type="text" id="searchInput9" placeholder="IntroduceÈ›i inlocuitor">
                <select id="selectare9" class="selectare">
                    <option value="Verde">Verde</option>
                    <option value="Albastru">Albastru</option>
                    <option value="Portocaliu">Portocaliu</option>
                    <option value="Gri">Gri</option>
                </select>
                <button onclick="addValueToList2(2)">Introdu</button>
                <ul id="recomandari9" class="recomandari"></ul>

                <div class="match" id="match3">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Portocaliu">
                                    Portocaliu
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Portocaliu">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Albastru">
                                    Albastru
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Albastru">

                            </ul>
                        </div>

                    </div>
                </div>

                <div class="match" id="match4">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Gri">
                                    Gri
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Gri">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Verde">
                                    Verde
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Verde">

                            </ul>
                        </div>

                    </div>
                </div>
            </div>


            <div class="etapa" id="etapa3">
                <h3>Etapa 3</h3>
                <input type="text" id="searchInput3" placeholder="IntroduceÈ›i o valoare">
                <button onclick="addValueToList(3)">Introdu</button>
                <ul id="recomandari3" class="recomandari"></ul>
                <br>
                <input type="text" id="searchInput10" placeholder="IntroduceÈ›i inlocuitor">
                <select id="selectare10" class="selectare">
                    <option value="Verde">Verde</option>
                    <option value="Albastru">Albastru</option>
                    <option value="Portocaliu">Portocaliu</option>
                    <option value="Gri">Gri</option>
                </select>
                <button onclick="addValueToList2(3)">Introdu</button>
                <ul id="recomandari10" class="recomandari"></ul>

                <div class="match" id="match5">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Verde">
                                    Verde
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Verde">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Albastru">
                                    Albastru
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Albastru">

                            </ul>
                        </div>

                    </div>
                </div>

                <div class="match" id="match6">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Portocaliu">
                                    Portocaliu
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Portocaliu">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Gri">
                                    Gri
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Gri">

                            </ul>
                        </div>

                    </div>
                </div>
            </div>
            <h2>Retur</h2>
            <div class="etapa" id="etapa4">
                <h3>Etapa 4</h3>
                <input type="text" id="searchInput4" placeholder="IntroduceÈ›i o valoare">
                <button onclick="addValueToList(4)">Introdu</button>
                <ul id="recomandari4" class="recomandari"></ul>
                <br>
                <input type="text" id="searchInput11" placeholder="IntroduceÈ›i inlocuitor">
                <select id="selectare11" class="selectare">
                    <option value="Verde">Verde</option>
                    <option value="Albastru">Albastru</option>
                    <option value="Portocaliu">Portocaliu</option>
                    <option value="Gri">Gri</option>
                </select>
                <button onclick="addValueToList2(4)">Introdu</button>
                <ul id="recomandari11" class="recomandari"></ul>

                <div class="match" id="match7">
                    <div class="match-info">
                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Albastru">
                                    Albastru
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Albastru">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Verde">
                                    Verde
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Verde">

                            </ul>
                        </div>

                    </div>
                </div>


                <div class="match" id="match8">
                    <div class="match-info">
                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Gri">
                                    Gri
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Gri">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Portocaliu">
                                    Portocaliu
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Portocaliu">

                            </ul>
                        </div>

                    </div>


                </div>
            </div>

            <div class="etapa" id="etapa5">
                <h3>Etapa 5</h3>
                <input type="text" id="searchInput5" placeholder="IntroduceÈ›i o valoare">
                <button onclick="addValueToList(5)">Introdu</button>
                <ul id="recomandari5" class="recomandari"></ul>
                <br>
                <input type="text" id="searchInput12" placeholder="IntroduceÈ›i inlocuitor">
                <select id="selectare12" class="selectare">
                    <option value="Verde">Verde</option>
                    <option value="Albastru">Albastru</option>
                    <option value="Portocaliu">Portocaliu</option>
                    <option value="Gri">Gri</option>
                </select>
                <button onclick="addValueToList2(5)">Introdu</button>
                <ul id="recomandari12" class="recomandari"></ul>

                <div class="match" id="match9">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Verde">
                                    Verde
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Verde">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Gri">
                                    Gri
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Gri">

                            </ul>
                        </div>

                    </div>
                </div>

                <div class="match" id="match10">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Albastru">
                                    Albastru
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Albastru">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Portocaliu">
                                    Portocaliu
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Portocaliu">

                            </ul>
                        </div>

                    </div>
                </div>
            </div>


            <div class="etapa" id="etapa6">
                <h3>Etapa 6</h3>
                <input type="text" id="searchInput6" placeholder="IntroduceÈ›i o valoare">
                <button onclick="addValueToList(6)">Introdu</button>
                <ul id="recomandari6" class="recomandari"></ul>
                <br>
                <input type="text" id="searchInput13" placeholder="IntroduceÈ›i inlocuitor">
                <select id="selectare13" class="selectare">
                    <option value="Verde">Verde</option>
                    <option value="Albastru">Albastru</option>
                    <option value="Portocaliu">Portocaliu</option>
                    <option value="Gri">Gri</option>
                </select>
                <button onclick="addValueToList2(6)">Introdu</button>
                <ul id="recomandari13" class="recomandari"></ul>

                <div class="match" id="match11">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Verde">
                                    Verde
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Verde">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Portocaliu">
                                    Portocaliu
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Portocaliu">

                            </ul>
                        </div>

                    </div>
                </div>

                <div class="match" id="match12">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">
                                <div class="Gri">
                                    Gri
                                </div>
                            </div>
                            <ul id="marcatori-stanga" class="list-Gri">

                            </ul>
                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                                <div class="Albastru">
                                    Albastru
                                </div>
                            </div>
                            <ul id="marcatori-dreapta" class="list-Albastru">

                            </ul>
                        </div>

                    </div>
                </div>
            </div>

            <br>


            <link href="https://fonts.googleapis.com/css?family=Fjalla+One" rel="stylesheet">

            <h1 class="headin">Clasament</h1>
            <div class="ptable table-responsive">
                <table class="table table-striped">
                    <tr class="bg info">
                        <th>Locul</th>
                        <th>Echipa</th>
                        <th>V</th>
                        <th>E</th>
                        <th>I</th>
                        <th>GD</th>
                        <th>GP</th>
                        <th>G+/-</th>
                        <th>Punctaj</th>
                    </tr>
                    <tbody id="clasamentBody">
                    </tbody>
                </table>
            </div>

            <div class="finala" id="etapa7">
                <input type="text" id="searchInput7" placeholder="IntroduceÈ›i o valoare">
                <button onclick="addValueToList(7)">Introdu</button>
                <ul id="recomandari7" class="recomandari"></ul>
                <br>
                <input type="text" id="searchInput14" placeholder="IntroduceÈ›i inlocuitor">
                <select id="selectare14" class="selectare">
                    <option value="Verde">Verde</option>
                    <option value="Albastru">Albastru</option>
                    <option value="Portocaliu">Portocaliu</option>
                    <option value="Gri">Gri</option>
                </select>
                <button onclick="addValueToList2(7)">Introdu</button>
                <ul id="recomandari14" class="recomandari"></ul>

                <h3>Finala Mica</h3>
                <div class="finala" id="finala-mica">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">

                            </div>

                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">
                            </div>

                        </div>

                    </div>
                </div>
                <h3>Finala Mare</h3>
                <div class="finala" id="finala-mare">
                    <div class="match-info">

                        <div class="left-team-info">
                            <div class="team-name">

                            </div>

                        </div>

                        <strong class="scor"></strong>

                        <div class="right-team-info">
                            <div class="team-name">

                            </div>

                        </div>

                    </div>
                </div>
            </div>

            <button type="submit" class="btn btn-primary" style="text-align: center;"> Introdu etapa </button>
    </form>

    <div class="ptable">
        <h1 class="headin">Golgheteri</h1>
        <table class="table table-striped">
            <tr class="bg info">
                <th>Locul</th>
                <th>Nume</th>
                <th>Goluri Finala</th>
                <th>Total</th>
            </tr>
            <tbody id="golgheteryBody">
            </tbody>
        </table>
    </div>
    </div>
    {{end}}

    {{define "js"}}
    <script>
        const allPlayers = [
            "Adam Catalin",
            "Agache Bogdan",
            "Agavriloaie Alexandru",
            "Albu Mihai",
            "Antochi Cipiran",
            "Apetroaei Cezar", "Deloiu Florin", "Stativa Andrei", "Fanaragiu Andrei"]

        async function fetchData() {
            fetch('../db/jucatori.json').then(response => {
                return response.json();
            }).then(data => {
                console.log(data)
                return data
            }).catch(err => {
                // Do something for an error here
                console.log(err)
            });
        }

        async function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }


        async function initializeAutocomplete() {
            const input = document.getElementById("input_selectPlayer");
            autocomplete(input, allPlayers);
        }

        const table = document.getElementById("teams");
        let currentColumn = 0;
        let currentRow = 1;

        const colors = [[], [], [], []]
        const prezentPlayers = []

        function populateTable(value) {
            const table = document.getElementById('teams');
            const emptyPosition = findFirstEmptyPosition();

            if (emptyPosition) {
                const { row, column } = emptyPosition;
                const cell = table.rows[row].cells[column];

                const deleteIcon = document.createElement('i');
                deleteIcon.classList.add('fas', 'fa-trash-alt', 'delete-button');

                cell.innerHTML = '';
                cell.textContent = value;
                cell.appendChild(deleteIcon);
            }
        }

        const team = new Map()
        team.set('grey', colors[0])
        team.set('orange', colors[1])
        team.set('green', colors[2])
        team.set('blue', colors[3])


        function incrementPosition() {
            currentRow++;
            if (currentRow === 7) {
                currentRow = 1;
                currentColumn++;
            }
        }

        const submitButton = document.getElementById("button_selectPlayer");
        submitButton.addEventListener("click", function () {
            const input = document.getElementById("input_selectPlayer");
            const selectedValue = input.value;
            populateTable(selectedValue);
        });

        initializeAutocomplete()

        // Function to measure the length of non-null <li> elements within a <ul> element
        function countNonNullLi(ulElement) {
            const liElements = ulElement.querySelectorAll('li');
            let count = 0;

            liElements.forEach(li => {
                if (li.textContent.trim() !== '') {
                    count++;
                }
            });

            return count;
        }

        var clasament = [
            {
                'culoare': 'Verde', 'meciuri_jucate': 0, 'victorii': 0, 'egaluri': 0, 'infrangeri': 0, 'goluri_date': 0, 'goluri_primite': 0, 'golaveraj': 0, 'punctaj': 0,
            },
            {
                'culoare': `Portocaliu`, 'meciuri_jucate': 0, 'victorii': 0, 'egaluri': 0, 'infrangeri': 0, 'goluri_date': 0, 'goluri_primite': 0, 'golaveraj': 0, 'punctaj': 0,
            },
            {
                'culoare': `Albastru`, 'meciuri_jucate': 0, 'victorii': 0, 'egaluri': 0, 'infrangeri': 0, 'goluri_date': 0, 'goluri_primite': 0, 'golaveraj': 0, 'punctaj': 0,
            },
            {
                'culoare': `Gri`, 'meciuri_jucate': 0, 'victorii': 0, 'egaluri': 0, 'infrangeri': 0, 'goluri_date': 0, 'goluri_primite': 0, 'golaveraj': 0, 'punctaj': 0
            },
        ]

        function getMatchInformations(match) {
            leftTeamName = match.children[0].children[0].children[0].textContent.trim();
            rightTeamName = match.children[0].children[2].children[0].textContent.trim();
            score = match.children[0].children[1].textContent

            return [leftTeamName, rightTeamName, score];
        }


        function updateClasament(match) {
            matchInformations = getMatchInformations(match);
            leftTeamName = matchInformations[0];
            rightTeamName = matchInformations[1];
            score = matchInformations[2];

            scoreInt = score.split('-');
            leftTeamGoals = parseInt(scoreInt[0]);
            rightTeamGoals = parseInt(scoreInt[1]);

            leftTeam = getTeam(leftTeamName);
            rightTeam = getTeam(rightTeamName);

            result = leftTeamGoals - rightTeamGoals;

            leftTeam.goluri_date += leftTeamGoals;
            leftTeam.goluri_primite += rightTeamGoals;
            leftTeam.golaveraj = leftTeam.goluri_date - leftTeam.goluri_primite;

            rightTeam.goluri_date += rightTeamGoals;
            rightTeam.goluri_primite += leftTeamGoals;
            rightTeam.golaveraj = rightTeam.goluri_date - rightTeam.goluri_primite;

            if (result == 0) {
                leftTeam.egaluri++;
                rightTeam.egaluri++;
                leftTeam.punctaj++;
                rightTeam.punctaj++;
            } else if (result < 0) {
                leftTeam.infrangeri++;
                rightTeam.victorii++;
                rightTeam.punctaj += 3;
            } else {
                leftTeam.victorii++;
                rightTeam.infrangeri++;
                leftTeam.punctaj += 3;
            }

            leftTeam.meciuri_jucate++;
            rightTeam.meciuri_jucate++;
        }

        const matches = document.querySelectorAll('.match');
        matches.forEach(match => {
            const leftTeamGoalsUl = match.querySelector('.left-team-info ul');
            const rightTeamGoalsUl = match.querySelector('.right-team-info ul');

            const leftTeamGoalsCount = countNonNullLi(leftTeamGoalsUl);
            const rightTeamGoalsCount = countNonNullLi(rightTeamGoalsUl);

            const scoreElement = match.querySelector('.scor');
            scoreElement.textContent = `${leftTeamGoalsCount} - ${rightTeamGoalsCount}`;

            updateClasament(match);
        }, this);



        var clasamentSelectiv = [
            { 'culoare': 'Verde', 'vs_Portocaliu': 0, 'vs_Albastru': 0, 'vs_Gri': 0 },
            { 'culoare': 'Portocaliu', 'vs_Verde': 0, 'vs_Albastru': 0, 'vs_Gri': 0 },
            { 'culoare': 'Gri', 'vs_Portocaliu': 0, 'vs_Albastru': 0, 'vs_Verde': 0 },
            { 'culoare': 'Albastru', 'vs_Portocaliu': 0, 'vs_Verde': 0, 'vs_Gri': 0 },
        ]

        // this function get better team from tur and retur
        function getBetterTeamByDirectMatch(team1, team2) {
            const matches = document.querySelectorAll('.match');
            matches.forEach(match => {
                const matchInformations = getMatchInformations(match);
                const leftTeamName = matchInformations[0];
                const rightTeamName = matchInformations[1];
                const score = matchInformations[2];

                const scoreInt = score.split('-');
                const leftTeamGoals = parseInt(scoreInt[0]);
                const rightTeamGoals = parseInt(scoreInt[1]);

                const leftTeam = clasamentSelectiv.find(team => team.culoare === leftTeamName);
                const rightTeam = clasamentSelectiv.find(team => team.culoare === rightTeamName);

                if (leftTeam && rightTeam) {
                    leftTeam[`vs_${rightTeamName}`] += leftTeamGoals - rightTeamGoals;
                    rightTeam[`vs_${leftTeamName}`] += rightTeamGoals - leftTeamGoals;
                }
            }, this)

            const leftTeam = clasamentSelectiv.find(team => team.culoare === leftTeamName);
            const rightTeam = clasamentSelectiv.find(team => team.culoare === rightTeamName);

            if (leftTeam && rightTeam) {
                if (leftTeam[`vs_${rightTeamName}`] > rightTeam[`vs_${leftTeamName}`]) {
                    return - 1;
                } else if (leftTeam[`vs_${rightTeamName}`] < rightTeam[`vs_${leftTeamName}`]) {
                    return 1;
                } else {
                    return 0
                }
            }
        }

        function getTeam(color) {
            for (var i = 0; i < clasament.length; i++) {
                if (clasament[i].culoare == color) {
                    return clasament[i];
                }
            }
        }

        function buildClasament(data) {
            var table = document.getElementById('clasamentBody');

            for (var i = 0; i < data.length; i++) {
                var row = `<tr>
                    <td>${i + 1}</td>
                    <td>${data[i].culoare}</td>
                    <td>${data[i].victorii}</td>
                    <td>${data[i].egaluri}</td>
                    <td>${data[i].infrangeri}</td>
                    <td>${data[i].goluri_date}</td>
                    <td>${data[i].goluri_primite}</td>
                    <td>${data[i].golaveraj}</td>
                    <td>${data[i].punctaj}</td>
                </tr>`
                table.innerHTML += row;
            }
        }
        var marcatori = []

        function buildGolgheteri() {
            var table = document.getElementById('golgheteryBody');
            const players = document.querySelectorAll('li');

            players.forEach(player => {
                if (player.textContent != "") {
                    marcatori.push(player.textContent);
                }
            })

            // reduce the array to unique values
            marcatoriUnici = marcatori.reduce(function (a, b) {
                if (a.indexOf(b) < 0) a.push(b);
                return a;
            }, []);

            var marcatoriFinalaArray = []

            const marcatoriFinala = document.querySelectorAll('.finala li')
            marcatoriFinala.forEach(marcator => {
                if (marcator.textContent != "") {
                    marcatoriFinalaArray.push(marcator.textContent)
                }
            })

            marcatoriUnici
                .sort(function (marcator1, marcator2) {
                    if (marcatori.filter(marcator => marcator == marcator1).length == marcatori.filter(marcator => marcator == marcator2).length) {
                        if (marcatoriFinalaArray.filter(marcator3 => (marcator3 == marcator1)).length == marcatoriFinalaArray.filter(marcator3 => (marcator3 == marcator2)).length) {
                            return 0;
                        } else if (marcatoriFinalaArray.filter(marcator3 => (marcator3 == marcator1)).length > marcatoriFinalaArray.filter(marcator3 => (marcator2 == marcator2)).length) {
                            return -1;
                        } else {
                            return 1;
                        }
                    } else if (marcatori.filter(marcator => marcator == marcator1).length > marcatori.filter(marcator => marcator == marcator2).length) {
                        return -1;
                    } else {
                        return 1;
                    }
                })
                .forEach((marcator, index) => {
                    var row = `<tr>
                    <td>${index + 1}</td>
                    <td>${marcator}</td>
                    <td>${marcatoriFinalaArray.filter(marcator2 => (marcator2 == marcator)).length}</td>
                    <td>${marcatori.filter(marcator2 => marcator2 == marcator).length}</td></td>
                </tr>`
                    table.innerHTML += row;
                }, this)
        }


        // sort the clasament array by points
        function sortClasament() {
            clasament.sort(function (team1, team2) {
                if (team1.punctaj == team2.punctaj) {
                    //console.log(team1,team2,getBetterTeamByDirectMatch(team1,team2));

                    if (getBetterTeamByDirectMatch(team1, team2) == 0) {
                        if (team1.golaveraj == team2.golaveraj) {
                            if (team1.goluri_date == team2.goluri_date) {
                                // change table loc with the name PENALTY
                                var clasament1 = document.getElementById('clasamentBody');
                                var rows = clasament1.querySelectorAll('tr');
                                rows.forEach(row => {
                                    const teamName = row.children[1].textContent.trim();
                                    if (teamName === team1.culoare) {
                                        row.children[0].textContent = 'PENALTY';
                                        row.children[0].style.color = 'red';
                                    } else if (teamName === team2.culoare) {
                                        row.children[0].textContent = 'PENALTY';
                                        row.children[0].style.color = 'red';
                                    }
                                }, this);
                                return 0;
                            } else if (team1.goluri_date > team2.goluri_date) {
                                return -1;
                            } else {
                                return 1;
                            }
                        } else if (team1.golaveraj > team2.golaveraj) {
                            return -1;
                        } else {
                            return 1;
                        }
                    } else {
                        return getBetterTeamByDirectMatch(team1, team2);
                    }
                } else if (team1.punctaj > team2.punctaj) {
                    return -1;
                } else {
                    return 1;
                }
            });
        }


        sortClasament();
        buildClasament(clasament);
        sortClasament();

        var addedDivs = [];
        function addFinalsTeam(clasament) {
            var finalaMica = document.getElementById('finala-mica');
            var finalaMare = document.getElementById('finala-mare');

            echipaStangaFinalaMica = finalaMica.children[0].children[0].children[0]

            echipaDreaptaFinalaMica = finalaMica.children[0].children[2].children[0]

            echipaStangaFinalaMare = finalaMare.children[0].children[0].children[0]
            echipaDreaptaFinalaMare = finalaMare.children[0].children[2].children[0]

            numeEchipaStangaFinalaMica = document.createElement('div')
            numeEchipaStangaFinalaMica.classList.add(clasament[2].culoare)
            numeEchipaStangaFinalaMica.textContent = clasament[2].culoare;
            echipaStangaFinalaMica.appendChild(numeEchipaStangaFinalaMica)

            numeEchipaDreaptaFinalaMica = document.createElement('div')
            numeEchipaDreaptaFinalaMica.classList.add(clasament[3].culoare)
            numeEchipaDreaptaFinalaMica.textContent = clasament[3].culoare;
            echipaDreaptaFinalaMica.appendChild(numeEchipaDreaptaFinalaMica)

            numeEchipaStangaFinalaMare = document.createElement('div')
            numeEchipaStangaFinalaMare.classList.add(clasament[0].culoare)
            numeEchipaStangaFinalaMare.textContent = clasament[0].culoare;
            echipaStangaFinalaMare.appendChild(numeEchipaStangaFinalaMare)

            numeEchipaDreaptaFinalaMare = document.createElement('div')
            numeEchipaDreaptaFinalaMare.classList.add(clasament[1].culoare)
            numeEchipaDreaptaFinalaMare.textContent = clasament[1].culoare;
            echipaDreaptaFinalaMare.appendChild(numeEchipaDreaptaFinalaMare)

            // lista ul pentru echipa stÃ¢nga Ã®n finala micÄƒ
            ulEchipaStangaFinalaMica = document.createElement('ul');
            ulEchipaStangaFinalaMica.id = 'marcatori-stanga';
            ulEchipaStangaFinalaMica.classList.add('list-' + clasament[2].culoare);
            echipaStangaFinalaMica.appendChild(ulEchipaStangaFinalaMica);

            // lista ul pentru echipa dreapta Ã®n finala micÄƒ
            ulEchipaDreaptaFinalaMica = document.createElement('ul');
            ulEchipaDreaptaFinalaMica.id = 'marcatori-dreapta';
            ulEchipaDreaptaFinalaMica.classList.add('list-' + clasament[3].culoare);
            echipaDreaptaFinalaMica.appendChild(ulEchipaDreaptaFinalaMica)

            // lista ul pentru echipa stÃ¢nga Ã®n finala mare
            ulEchipaStangaFinalaMare = document.createElement('ul');
            ulEchipaStangaFinalaMare.id = 'marcatori-stanga';
            ulEchipaStangaFinalaMare.classList.add('list-' + clasament[0].culoare);
            echipaStangaFinalaMare.appendChild(ulEchipaStangaFinalaMare);

            // lista ul pentru echipa dreapta Ã®n finala mare
            ulEchipaDreaptaFinalaMare = document.createElement('ul');
            ulEchipaDreaptaFinalaMare.id = 'marcatori-dreapta';
            ulEchipaDreaptaFinalaMare.classList.add('list-' + clasament[1].culoare);
            echipaDreaptaFinalaMare.appendChild(ulEchipaDreaptaFinalaMare)

            // make the table centered
            const table = document.querySelector('table');
            table.style.marginLeft = 'auto';
            table.style.marginRight = 'auto';
            addedDivs.push(numeEchipaStangaFinalaMica);
            addedDivs.push(numeEchipaDreaptaFinalaMica);
            addedDivs.push(numeEchipaStangaFinalaMare);
            addedDivs.push(numeEchipaDreaptaFinalaMare);
            addedDivs.push(ulEchipaStangaFinalaMica);
            addedDivs.push(ulEchipaDreaptaFinalaMica);
            addedDivs.push(ulEchipaStangaFinalaMare);
            addedDivs.push(ulEchipaDreaptaFinalaMare);
        }




        addFinalsTeam(clasament);
        const finale = document.querySelectorAll('.finala');
        finale.forEach(finala => {
            const leftTeamGoalsUl = finala.querySelector('.left-team-info ul');
            const rightTeamGoalsUl = finala.querySelector('.right-team-info ul');

            const leftTeamGoalsCount = countNonNullLi(leftTeamGoalsUl);
            const rightTeamGoalsCount = countNonNullLi(rightTeamGoalsUl);

            const scoreElement = finala.querySelector('.scor');
            scoreElement.textContent = `${leftTeamGoalsCount} - ${rightTeamGoalsCount}`;

        }, this);
        ;

        function removeValue(cell) {
            // Remove the value from the table cell
            cell.innerHTML = '';
        }

        // Add event listener to delete-button
        table.addEventListener('click', function (event) {
            if (event.target.classList.contains('delete-button')) {
                const cell = event.target.parentNode;
                removeValue(cell);
            }
        });


        //screen the table data
        const dataPlayer = [];
        const getDataButton = document.getElementById('getDataButton');
        getDataButton.addEventListener('click', function () {
            const rows = table.getElementsByTagName('tr');
            const columns = table.getElementsByTagName('th');


            for (let i = 1; i < rows.length; i++) {
                const cells = rows[i].getElementsByTagName('td');
                const rowData = {};

                for (let j = 0; j < cells.length; j++) {
                    const columnName = columns[j].innerText.trim();
                    const cellContent = cells[j].innerText.trim();
                    rowData[columnName] = cellContent;
                }

                dataPlayer.push(rowData);
            }

            console.log(dataPlayer);
            getDataButton.remove();
            removeDeleteButtons();
        });


        function checkTableContent() {
            const table = document.getElementById('teams');
            const rows = table.getElementsByTagName('tr');

            for (let i = 0; i < rows.length; i++) {
                const cells = rows[i].getElementsByTagName('td');
                for (let j = 0; j < cells.length; j++) {
                    const cellContent = cells[j].innerText.trim();
                    if (cellContent === '') {
                        return false;
                    }
                }
            }
            return true;
        }

        getDataButton.style.display = 'none';

        setInterval(() => {
            const shouldShowButton = checkTableContent();
            getDataButton.style.display = shouldShowButton ? 'block' : 'none';
        }, 500);

        function findFirstEmptyPosition() {
            const table = document.getElementById('teams');
            const rows = table.getElementsByTagName('tr');

            for (let j = 0; j < rows[0].cells.length; j++) {
                for (let i = 0; i < rows.length; i++) {
                    const cellContent = rows[i].cells[j].innerText.trim();
                    if (cellContent === '') {
                        return { row: i, column: j };
                    }
                }
            }

            return null;
        }

        function removeDeleteButtons() {
            const table = document.getElementById('teams');
            const rows = table.getElementsByTagName('tr');

            for (let i = 0; i < rows.length; i++) {
                const cells = rows[i].getElementsByTagName('td');
                for (let j = 0; j < cells.length; j++) {
                    const deleteButton = cells[j].querySelector('.delete-button');
                    if (deleteButton) {
                        deleteButton.remove();
                    }
                }
            }
        }

        function addValueToList(etapa) {

            var searchValue;
            switch (etapa) {
                case 1:
                    searchValue = document.getElementById("searchInput1").value;
                    break;
                case 2:
                    searchValue = document.getElementById("searchInput2").value;
                    break;
                case 3:
                    searchValue = document.getElementById("searchInput3").value;
                    break;
                case 4:
                    searchValue = document.getElementById("searchInput4").value;
                    break;
                case 5:
                    searchValue = document.getElementById("searchInput5").value;
                    break;
                case 6:
                    searchValue = document.getElementById("searchInput6").value;
                    break;
                case 7:
                    searchValue = document.getElementById("searchInput7").value;
                    break;

            }

            // search value in dataPlayer
            for (var i = 0; i < dataPlayer.length; i++) {
                var matchData = dataPlayer[i];
                for (var key in matchData) {
                    if (matchData[key] === searchValue) {

                        var listClassName = "list-" + key;
                        var list = document.querySelector("#etapa" + etapa + " ul." + listClassName);

                        // lista are 5 elemente?
                        if (list.children.length < 5) {
                            var listItem = document.createElement("li");
                            listItem.textContent = searchValue;

                            // delete button
                            const deleteIcon = document.createElement('i');
                            deleteIcon.classList.add('fas', 'fa-trash-alt', 'delete-button');

                            // delete button listener + update score
                            deleteIcon.addEventListener('click', function () {
                                list.removeChild(listItem);
                                updateScoreMatch(etapa);
                            });
                            listItem.appendChild(deleteIcon);
                            list.appendChild(listItem);

                            updateScoreMatch(etapa);

                        } else {
                            alert("Lista " + key + " pentru etapa " + etapa + " are deja 5 elemente.");
                        }
                        return;
                    }
                }
            }
        }

        function addValueToList2(etapa) {

            var searchValue;
            var selectElement;
            switch (etapa) {
                case 1:
                    searchValue = document.getElementById("searchInput8").value;
                    selectElement = document.getElementById("selectare8");
                    break;
                case 2:
                    searchValue = document.getElementById("searchInput9").value;
                    selectElement = document.getElementById("selectare9");
                    break;
                case 3:
                    searchValue = document.getElementById("searchInput10").value;
                    selectElement = document.getElementById("selectare10");
                    break;
                case 4:
                    searchValue = document.getElementById("searchInput11").value;
                    selectElement = document.getElementById("selectare11");
                    break;
                case 5:
                    searchValue = document.getElementById("searchInput12").value;
                    selectElement = document.getElementById("selectare12");
                    break;
                case 6:
                    searchValue = document.getElementById("searchInput13").value;
                    selectElement = document.getElementById("selectare13");
                    break;
                case 7:
                    searchValue = document.getElementById("searchInput14").value;
                    selectElement = document.getElementById("selectare14");
                    break;

            }

            // search value in dataPlayer
            for (var i = 0; i < dataPlayer.length; i++) {
                var matchData = dataPlayer[i];
                for (var key in matchData) {
                    if (matchData[key] === searchValue) {


                        var listClassName = "list-" + selectElement.value;
                        //console.log(selectElement.value);
                        var list = document.querySelector("#etapa" + etapa + " ul." + listClassName);

                        // lista are 5 elemente?
                        if (list.children.length < 5) {
                            var listItem = document.createElement("li");
                            listItem.textContent = searchValue;

                            // delete button
                            const deleteIcon = document.createElement('i');
                            deleteIcon.classList.add('fas', 'fa-trash-alt', 'delete-button');

                            // delete button listener + update score
                            deleteIcon.addEventListener('click', function () {
                                list.removeChild(listItem);
                                updateScoreMatch(etapa);
                            });
                            listItem.appendChild(deleteIcon);
                            list.appendChild(listItem);

                            updateScoreMatch(etapa);

                        } else {
                            alert("Lista " + key + " pentru etapa " + etapa + " are deja 5 elemente.");
                        }
                        return;
                    }
                }
            }
        }

        // afisare recomandari
        function afiseazaRecomandari(etapa, searchTerm) {
            var recomandari = [];
            for (var i = 0; i < dataPlayer.length; i++) {
                var matchData = dataPlayer[i];
                for (var key in matchData) {
                    if (matchData[key].toLowerCase().includes(searchTerm.toLowerCase())) {
                        recomandari.push(matchData[key]);
                    }
                }
            }

            var recomandariList = document.getElementById("recomandari" + etapa);
            recomandariList.innerHTML = "";
            recomandari.forEach(function (recomandare) {
                var li = document.createElement("li");
                li.textContent = recomandare;
                // listener pentru cand apesi pe o obtiune dintr-o lista
                li.addEventListener("click", function () {
                    document.getElementById("searchInput" + etapa).value = recomandare;
                    recomandariList.innerHTML = "";
                });
                recomandariList.appendChild(li);
            });

        }

        function attachInputEvent(etapa) {
            var searchInput = document.getElementById("searchInput" + etapa);
            var recomandariList = document.getElementById("recomandari" + etapa);


            // adaugam recomandari pentru input
            searchInput.addEventListener("input", function () {
                var searchTerm = this.value;
                afiseazaRecomandari(etapa, searchTerm);
            });

            // ascundem lista cand dam click in afara ei
            document.addEventListener("click", function (event) {
                var isClickInsideRecomandari = recomandariList.contains(event.target);
                var isClickInsideInput = searchInput.contains(event.target);
                if (!isClickInsideRecomandari && !isClickInsideInput) {
                    recomandariList.innerHTML = "";
                }
            });
        }

        for (var etapa = 1; etapa <= 14; etapa++) {
            attachInputEvent(etapa);
        }

        // functie care va fii utilizata pentru actualizarea scorului fiecarui meci
        function updateScoreMatch(etapa) {
            resetClasamentValue();
            clearTable();
            const matches = document.querySelectorAll('.match');
            matches.forEach(match => {

                const leftTeamGoalsUl = match.querySelector('.left-team-info ul');
                const rightTeamGoalsUl = match.querySelector('.right-team-info ul');

                const leftTeamGoalsCount = countNonNullLi(leftTeamGoalsUl);
                const rightTeamGoalsCount = countNonNullLi(rightTeamGoalsUl);

                const scoreElement = match.querySelector('.scor');
                scoreElement.textContent = `${leftTeamGoalsCount} - ${rightTeamGoalsCount}`;

                updateClasament(match);
            }, this);

            sortClasament();
            buildClasament(clasament);
            sortClasament();
            if (etapa != 7) {
                removeFinalsTeams();
                addFinalsTeam(clasament)
                const finale = document.querySelectorAll('.finala');
                finale.forEach(finala => {
                    const leftTeamGoalsUl = finala.querySelector('.left-team-info ul');
                    const rightTeamGoalsUl = finala.querySelector('.right-team-info ul');

                    const leftTeamGoalsCount = countNonNullLi(leftTeamGoalsUl);
                    const rightTeamGoalsCount = countNonNullLi(rightTeamGoalsUl);

                    const scoreElement = finala.querySelector('.scor');
                    scoreElement.textContent = `${leftTeamGoalsCount} - ${rightTeamGoalsCount}`;

                }, this);
            }
            removeTableRows('golgheteryBody');
            populateGolgheteryTable();
        }

        function clearTable() {
            var table = document.getElementById('clasamentBody');
            table.innerHTML = '';
        }

        function resetClasamentValue() {
            clasament = [];
            clasamentSelectiv = [];
            clasament = [
                {
                    'culoare': 'Verde', 'meciuri_jucate': 0, 'victorii': 0, 'egaluri': 0, 'infrangeri': 0, 'goluri_date': 0, 'goluri_primite': 0, 'golaveraj': 0, 'punctaj': 0,
                },
                {
                    'culoare': `Portocaliu`, 'meciuri_jucate': 0, 'victorii': 0, 'egaluri': 0, 'infrangeri': 0, 'goluri_date': 0, 'goluri_primite': 0, 'golaveraj': 0, 'punctaj': 0,
                },
                {
                    'culoare': `Albastru`, 'meciuri_jucate': 0, 'victorii': 0, 'egaluri': 0, 'infrangeri': 0, 'goluri_date': 0, 'goluri_primite': 0, 'golaveraj': 0, 'punctaj': 0,
                },
                {
                    'culoare': `Gri`, 'meciuri_jucate': 0, 'victorii': 0, 'egaluri': 0, 'infrangeri': 0, 'goluri_date': 0, 'goluri_primite': 0, 'golaveraj': 0, 'punctaj': 0
                },
            ]

            clasamentSelectiv = [
                { 'culoare': 'Verde', 'vs_Portocaliu': 0, 'vs_Albastru': 0, 'vs_Gri': 0 },
                { 'culoare': 'Portocaliu', 'vs_Verde': 0, 'vs_Albastru': 0, 'vs_Gri': 0 },
                { 'culoare': 'Gri', 'vs_Portocaliu': 0, 'vs_Albastru': 0, 'vs_Verde': 0 },
                { 'culoare': 'Albastru', 'vs_Portocaliu': 0, 'vs_Verde': 0, 'vs_Gri': 0 },
            ]

        }

        function removeFinalsTeams() {
            for (var i = 0; i < addedDivs.length; i++) {
                var div = addedDivs[i];
                div.parentNode.removeChild(div);
            }
            addedDivs = [];
        }

        function removeTableRows(tableId) {
            var table = document.getElementById(tableId);
            if (table) {
                var rows = table.getElementsByTagName('tr');

                for (var i = rows.length - 1; i >= 0; i--) {
                    table.deleteRow(i);
                }
            }
        }

        function addGoalScorerRows(names, finalGoals, total) {
            const tableBody = document.getElementById('golgheteryBody');


            tableBody.innerHTML = '';

            // Filter out players with a total of 0
            const filteredData = names.map((name, index) => ({
                name,
                finalGoals: finalGoals[index],
                total: total[index]
            })).filter(data => data.total > 0);

            // Sort filtered data in descending order based on the 'total' value
            const sortedData = filteredData.sort((a, b) => b.total - a.total);

            // Loop through the sorted data and add rows to the table
            sortedData.forEach((data, index) => {
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
    <td>${index + 1}</td>
    <td>${data.name}</td>
    <td>${data.finalGoals}</td>
    <td>${data.total}</td>
    `;
                tableBody.appendChild(newRow);
            });
        }



        function calculateTotalFinala(names) {
            const ulEchipaStangaFinalaMica = document.querySelector('#finala-mica .left-team-info ul');
            const ulEchipaDreaptaFinalaMica = document.querySelector('#finala-mica .right-team-info ul');
            const ulEchipaStangaFinalaMare = document.querySelector('#finala-mare .left-team-info ul');
            const ulEchipaDreaptaFinalaMare = document.querySelector('#finala-mare .right-team-info ul');

            const allLists = [ulEchipaStangaFinalaMica, ulEchipaDreaptaFinalaMica, ulEchipaStangaFinalaMare, ulEchipaDreaptaFinalaMare];

            const nameOccurrences = {};

            // initailize 0
            names.forEach(name => {
                nameOccurrences[name] = 0;
            });

            // Count occurrences of names in the ul lists
            allLists.forEach(ul => {
                const liElements = ul.querySelectorAll('li');
                liElements.forEach(li => {
                    const playerName = li.textContent.trim();
                    if (nameOccurrences.hasOwnProperty(playerName)) {
                        nameOccurrences[playerName]++;
                    }
                });
            });

            const occurrencesVector = names.map(name => nameOccurrences[name]);
            return occurrencesVector;
        }

        function calculateTotalEtapeFinala(names) {
            const allLists = document.querySelectorAll('.list-Verde, .list-Portocaliu, .list-Albastru, .list-Gri');

            const nameOccurrences = {};

            // Initialize 0
            names.forEach(name => {
                nameOccurrences[name] = 0;
            });

            // Count occurrences of names in the ul lists
            allLists.forEach(ul => {
                const liElements = ul.querySelectorAll('li');
                liElements.forEach(li => {
                    const playerName = li.textContent.trim();
                    if (nameOccurrences.hasOwnProperty(playerName)) {
                        nameOccurrences[playerName]++;
                    }
                });
            });

            const occurrencesVector = names.map(name => nameOccurrences[name]);
            return occurrencesVector;
        }



        function createDataPlayerName() {
            var data12 = [];
            for (var i = 0; i < dataPlayer.length; i++) {
                var matchData = dataPlayer[i];
                for (var key in matchData) {
                    data12.push(matchData[key]);
                }
            }
            return data12;
        }

        function populateGolgheteryTable() {
            var dataPlayerName = createDataPlayerName();
            var dataPlayerFInala = calculateTotalFinala(dataPlayerName);
            var dataPlayerEtapeFinala = calculateTotalEtapeFinala(dataPlayerName);
            //console.log(dataPlayerFInala,dataPlayerEtapeFinala);
            addGoalScorerRows(dataPlayerName, dataPlayerFInala, dataPlayerEtapeFinala);
        }


        function submitEditieForm() {
            const dateInput = document.getElementById("data_editie").value
            const numarInput = document.getElementById("numar_editie").value

            const informatiiEditie = {
                "data_editie": dateInput,
                "numar_editie": numarInput
            };

            fetch('http://localhost:8080/api/adauga-editie-json', {
                method: 'POST',
                body: JSON.stringify(informatiiEditie),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
            })
                .then(response => response.text())
                .then(responseText => console.log(responseText))
                .catch(error => console.error('Error:', error));

            console.log(informatiiEditie)
        }

        const form = document.getElementById("informatiiEtapa")
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            submitEditieForm()
        })



    </script>

    {{end}}
